version: '3.8'

services:
  # NPCEngine API Server
  npcengine:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: npcengine-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://npcengine:${DB_PASSWORD:-secure_password}@postgres:5432/npcengine
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CONFIG_BACKEND=database
      - CONFIG_DATABASE_URL=postgresql://npcengine:${DB_PASSWORD:-secure_password}@postgres:5432/npcengine
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - npcengine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: npcengine-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=npcengine
      - POSTGRES_USER=npcengine
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - npcengine-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U npcengine -d npcengine"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: npcengine-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    networks:
      - npcengine-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Frontend (React App)
  frontend:
    build:
      context: ./web-gui
      dockerfile: Dockerfile
    container_name: npcengine-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      - npcengine
    networks:
      - npcengine-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: npcengine-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - npcengine
      - frontend
    networks:
      - npcengine-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: npcengine-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - npcengine-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: npcengine-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - npcengine-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network
networks:
  npcengine-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 